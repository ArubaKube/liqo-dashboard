// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /healthz)
	GetHealthz(c *gin.Context)
	// Get list of clusters
	// (GET /v1/clusters)
	GetV1Clusters(c *gin.Context)
	// Get cluster by ID
	// (GET /v1/clusters/{id})
	GetV1ClustersId(c *gin.Context, id string)
	// Get nodes of a cluster by cluster ID
	// (GET /v1/clusters/{id}/nodes)
	GetV1ClustersIdNodes(c *gin.Context, id string)
	// Get list of namespaces
	// (GET /v1/namespaces)
	GetV1Namespaces(c *gin.Context)
	// Get namespace by name
	// (GET /v1/namespaces/{name})
	GetV1NamespacesName(c *gin.Context, name string)
	// Get offloaded pods by namespace name
	// (GET /v1/namespaces/{name}/offloaded)
	GetV1NamespacesNameOffloaded(c *gin.Context, name string)
	// Get local cluster info
	// (GET /v1/status/local-info)
	GetV1StatusLocalInfo(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealthz(c)
}

// GetV1Clusters operation middleware
func (siw *ServerInterfaceWrapper) GetV1Clusters(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Clusters(c)
}

// GetV1ClustersId operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClustersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ClustersId(c, id)
}

// GetV1ClustersIdNodes operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClustersIdNodes(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ClustersIdNodes(c, id)
}

// GetV1Namespaces operation middleware
func (siw *ServerInterfaceWrapper) GetV1Namespaces(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Namespaces(c)
}

// GetV1NamespacesName operation middleware
func (siw *ServerInterfaceWrapper) GetV1NamespacesName(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1NamespacesName(c, name)
}

// GetV1NamespacesNameOffloaded operation middleware
func (siw *ServerInterfaceWrapper) GetV1NamespacesNameOffloaded(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1NamespacesNameOffloaded(c, name)
}

// GetV1StatusLocalInfo operation middleware
func (siw *ServerInterfaceWrapper) GetV1StatusLocalInfo(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1StatusLocalInfo(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/healthz", wrapper.GetHealthz)
	router.GET(options.BaseURL+"/v1/clusters", wrapper.GetV1Clusters)
	router.GET(options.BaseURL+"/v1/clusters/:id", wrapper.GetV1ClustersId)
	router.GET(options.BaseURL+"/v1/clusters/:id/nodes", wrapper.GetV1ClustersIdNodes)
	router.GET(options.BaseURL+"/v1/namespaces", wrapper.GetV1Namespaces)
	router.GET(options.BaseURL+"/v1/namespaces/:name", wrapper.GetV1NamespacesName)
	router.GET(options.BaseURL+"/v1/namespaces/:name/offloaded", wrapper.GetV1NamespacesNameOffloaded)
	router.GET(options.BaseURL+"/v1/status/local-info", wrapper.GetV1StatusLocalInfo)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYTW/jNhP+Kwbf96hYVrZAC9+MZDc1mtpGnPTQYA8MOba5oUguSTlRA//3gtS3RTv2",
	"LlpsgQChODPkzDPPjEZ+Q0SmSgoQ1qDxGzJkAyn2yyspKLNMiqXFNvNbILIUjR/RTApAEVqAoEysUYQ+",
	"GoufODMboO5Ja6lRhO4A0xxFaCZttVzKFOrHzxGyuQI0RsZqd9AuQp+kBrYWVzwzFrS7VGmpQFsG3gWs",
	"2BL0FnTj1f81rNAY/S9uQonLOOL9IHZRc8KD5s685wLO7AaEZQR3oz/zHkaDpwuwL1I/32ILguTHVL75",
	"ZrlacYldar75CA1GZpqAmZCvGdNA3zvjrjLoWM9XKzjbWHJok+1KCpOl4Ai10HLLqF9WuxNBW7sP4lnI",
	"FxFg1q7ekU9fgFh30wynYBQm0KcZ0eCzf8/SwplXnCrnF7ocXSYXo58vRsn9aDT2f3+iAJEFLix7giY7",
	"78EybzR3ETK9MpwQy7auEO9Bp0xg6zRPDF3SUNRYYcJsfla+KqMHc2aiSVHj0+twEYTxCwUz7yDaDUlU",
	"Of4dK+UrQmML67yN40exkprAEqfgKIEidA0rnHFbPi2BA7FA/WOoaTUpXWyw6bC36YFlS6sOQxGaioWW",
	"aw3GlJ3xE2bcSyac1+vjyY2QknTeKvh+eLeSYO7bcSqti8dvTAQtN05jzELSf6JMWIrXxVm17SMCsZW5",
	"0vI1j/3yAnPFBIy3yTD5ZfgBRUismXgdJ8Pkp+GlC4BZSE2QR+UG1hrn7pnjJ+DFq4QWXQ/zRSeo3hG1",
	"Z+71o9C4uB2FUDpY9aLda/pSSQvqhYQajMXaLiRnpJPYCX/BuePOXDi2ZNoldwZb0EGi9BtI8wK/y4Qo",
	"VsuMEADqqVdz8Ly+2lR5nzAq6/IkCZEC1AZS0JgvrdR4vUetZHTDQlYppFLnp+kqSc2eZjJCJ0TntphY",
	"SZ8pZr3pLfsqB1YqyeU6H1BsNk8Sa4fbFrRhUrjjh6PhyPcKBQIrhsbog9+KkMJ2452JN4C53fzl1muw",
	"7p/DzlfYlKIxugH7a6niaaGkMAWul6OR+0fBEM2ULe6c/+YjMFmaYgcMKowHZAPk2YvibRKXbdgcu/WP",
	"5KrSCl9MpLAgbFkivJyd4i/GOVKNlW5VF+qx18TeENirYud6N9TJgDNjB3I1qMPphn4DNqzShiB+Y3R3",
	"Gg5T6jOncQoFeI9viDlPXDZR1QjcEOgAq2YoqzOIWmjs0+3zd6J7DqghEEkt3MeulAye8sH0Ogxc7LqY",
	"ORW+mVf+j2Hox6YgcqKQ7MPmIXGcw20Eq2ULyfr98A6As0bv36jEZkQ+qwhb0Rwuwz2lLgrxm1vvTgWj",
	"nNTeJ5MoFH8QOjXoBjnVEveIVckcn3xQBzGMy/G0GM9PRXNeG/2QsJ7EXjeznsXbGqmBHxD6sHcVKuyL",
	"RHSyUAxbMXej9kU1MBzGvvjy9oP51Cl/JzoHfjM59IvH8S+xUjp7d7Q1VzIrvCt1mLCwLl7gvhEekTs4",
	"j4h1e6Q88QszPLx1U+8Rr/uxz1OgYYWUdru/AwAA//+vMAcQPBMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

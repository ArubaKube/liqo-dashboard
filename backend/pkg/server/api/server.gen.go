// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /healthz)
	GetHealthz(c *gin.Context)
	// Get list of clusters
	// (GET /v1/clusters)
	GetV1Clusters(c *gin.Context)
	// Get cluster by ID
	// (GET /v1/clusters/{id})
	GetV1ClustersId(c *gin.Context, id string)
	// Get nodes of a cluster by cluster ID
	// (GET /v1/clusters/{id}/nodes)
	GetV1ClustersIdNodes(c *gin.Context, id string)
	// Get local cluster info
	// (GET /v1/info)
	GetV1Info(c *gin.Context)
	// Get list of namespaces
	// (GET /v1/namespaces)
	GetV1Namespaces(c *gin.Context)
	// Get namespace by name
	// (GET /v1/namespaces/{name})
	GetV1NamespacesName(c *gin.Context, name string)
	// Get offloaded pods by namespace name
	// (GET /v1/namespaces/{name}/offloaded)
	GetV1NamespacesNameOffloaded(c *gin.Context, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealthz(c)
}

// GetV1Clusters operation middleware
func (siw *ServerInterfaceWrapper) GetV1Clusters(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Clusters(c)
}

// GetV1ClustersId operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClustersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ClustersId(c, id)
}

// GetV1ClustersIdNodes operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClustersIdNodes(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ClustersIdNodes(c, id)
}

// GetV1Info operation middleware
func (siw *ServerInterfaceWrapper) GetV1Info(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Info(c)
}

// GetV1Namespaces operation middleware
func (siw *ServerInterfaceWrapper) GetV1Namespaces(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Namespaces(c)
}

// GetV1NamespacesName operation middleware
func (siw *ServerInterfaceWrapper) GetV1NamespacesName(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1NamespacesName(c, name)
}

// GetV1NamespacesNameOffloaded operation middleware
func (siw *ServerInterfaceWrapper) GetV1NamespacesNameOffloaded(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1NamespacesNameOffloaded(c, name)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/healthz", wrapper.GetHealthz)
	router.GET(options.BaseURL+"/v1/clusters", wrapper.GetV1Clusters)
	router.GET(options.BaseURL+"/v1/clusters/:id", wrapper.GetV1ClustersId)
	router.GET(options.BaseURL+"/v1/clusters/:id/nodes", wrapper.GetV1ClustersIdNodes)
	router.GET(options.BaseURL+"/v1/info", wrapper.GetV1Info)
	router.GET(options.BaseURL+"/v1/namespaces", wrapper.GetV1Namespaces)
	router.GET(options.BaseURL+"/v1/namespaces/:name", wrapper.GetV1NamespacesName)
	router.GET(options.BaseURL+"/v1/namespaces/:name/offloaded", wrapper.GetV1NamespacesNameOffloaded)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RX3W7jNhN9FYPfd6lYVrZAC98ZyW5qNLWNOOlFg71gqLHNjcThkpQTNfC7F6T+Ldqx",
	"d9FiCxgwxRn+zJkzh+QbYZhKFCCMJuM3otkGUuqaVyhibjiKpaEmc10gspSMH8kMBZCALEDEXKxJQD5q",
	"Q58SrjcQ2y+lUJGA3AGNcxKQGZqqucQU6s/PATG5BDIm2ig70S4gn1ABX4urJNMGlF1UKpSgDAe3BSr5",
	"EtQWVLOr/ytYkTH5X9iEEpZxhPtB7IJmhgeV2OG9LdDMbEAYzmg3+jPX4bF3dgHmBdXzLTUgWH7M5ZtX",
	"xtUqQWpT881TKNCYKQZ6wr5mXEH83hx31YDO6PlqBWcPxgTaZLtCobMULKEWCrc8ds2qdyLiVu+DeBb4",
	"IjzM2tU9+PQFmLErzWgKWlIGfZoxBS779zwtNvNKU2n3RS5Hl9HF6OeLUXQ/Go3d70/iIbKgxcieocnO",
	"e7DMG89dQHSvDCfM8K0txHtQKRfUWM8TQ8fYFzWVlHGTn5WvatCDPjPRrKjx6bW/CPz4+YKZdxDthiSq",
	"HP9OpXQVoaiBdd7G8aNYoWKwpClYSpCAXMOKZokpv5aQADMQu0+faDUpXWyo7rC30cBS0qrJSECmYqFw",
	"rUDrUhk/UZ44yyRJ6vbx5AZEYjxvFXw/vFtkNHFynKKx8biOiYjLjtMYs8D4nygTntJ1MVc99pGA2GIu",
	"Fb7moWte0ERyAeNtNIx+GX4gARFrLl7H0TD6aXhpA+AGUu3lUdlBlaK5/U7oEyTFURIXqkeTRSeo3hT1",
	"zuzxI8m4WJ34UDpY9aKtNX0rxgX1fEYF2lBlFphw1knsJHmhueXOXFi2ZMomdwZbUF6i9AWkOcDvMiGK",
	"1jJjDCB21Ks5eJ6uNlXeJ4zMujyJfKQAuYEUFE2WBhVd71ErGt1w36gUUlT5ab4SY73nGY3ICdHZLi5W",
	"6DLFjRt6y7/iwKDEBNf5IKZ684RUWdy2oDRHYacfjoYjpxUSBJWcjMkH1xUQSc3GbSbcAE3M5i/bXoOx",
	"fxY7V2HTmIzJDZhfSxdHC4lCF7hejkb2LwbNFJemWHP+m4tAZ2lKLTCkGDxgG2DPzhRuo7CUYX1s1T+i",
	"q8rLvzBDYUCYskSS8u4UftF2I9W10rbqQj12TOxdAntVbLfeDXUySLg2A1wN6nC6od+A8bu0IQjfeLw7",
	"DYdp7DKnaAoFeI9vhNud2GySSgjsJdACVt2hjMogaKGxT7fP34nuOaD6QGS1cR+70jJ4ygfTaz9woVUx",
	"fSp8M+f8H8PQXZu8yInCsg+bg8RyjrYRrJotJCtNOQzd1Hp8Z2wH3lKHXkLHb2ildfbukaevMCt2V/pw",
	"YWBdFLYD6IjdCvURs2ofNSfePP2i3k2ouyLVeXLJ8eiJ38mms4n9eFJnjd+/IazNi+csTW1Fc1hV95y6",
	"KIRvtr07FYzy4v2+NojC8QdRhwZdr0S0zD2dqGxWHlxQBzEMy9dG8do6Fc15PeiHhPUk9tonyFm8rZEa",
	"uPteH/auQ4V9kYgyC7vd3wEAAP//DCb1PiQTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

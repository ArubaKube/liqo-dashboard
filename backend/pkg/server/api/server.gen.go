// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /healthz)
	GetHealthz(c *gin.Context)
	// Get list of clusters
	// (GET /v1/clusters)
	GetV1Clusters(c *gin.Context)
	// Get cluster by ID
	// (GET /v1/clusters/{id})
	GetV1ClustersId(c *gin.Context, id string)
	// Get nodes of a cluster by cluster ID
	// (GET /v1/clusters/{id}/nodes)
	GetV1ClustersIdNodes(c *gin.Context, id string)
	// Get list of namespaces
	// (GET /v1/namespaces)
	GetV1Namespaces(c *gin.Context)
	// Get namespace by name
	// (GET /v1/namespaces/{name})
	GetV1NamespacesName(c *gin.Context, name string)
	// Get offloaded pods by namespace name
	// (GET /v1/namespaces/{name}/offloaded)
	GetV1NamespacesNameOffloaded(c *gin.Context, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealthz(c)
}

// GetV1Clusters operation middleware
func (siw *ServerInterfaceWrapper) GetV1Clusters(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Clusters(c)
}

// GetV1ClustersId operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClustersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ClustersId(c, id)
}

// GetV1ClustersIdNodes operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClustersIdNodes(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ClustersIdNodes(c, id)
}

// GetV1Namespaces operation middleware
func (siw *ServerInterfaceWrapper) GetV1Namespaces(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Namespaces(c)
}

// GetV1NamespacesName operation middleware
func (siw *ServerInterfaceWrapper) GetV1NamespacesName(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1NamespacesName(c, name)
}

// GetV1NamespacesNameOffloaded operation middleware
func (siw *ServerInterfaceWrapper) GetV1NamespacesNameOffloaded(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1NamespacesNameOffloaded(c, name)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/healthz", wrapper.GetHealthz)
	router.GET(options.BaseURL+"/v1/clusters", wrapper.GetV1Clusters)
	router.GET(options.BaseURL+"/v1/clusters/:id", wrapper.GetV1ClustersId)
	router.GET(options.BaseURL+"/v1/clusters/:id/nodes", wrapper.GetV1ClustersIdNodes)
	router.GET(options.BaseURL+"/v1/namespaces", wrapper.GetV1Namespaces)
	router.GET(options.BaseURL+"/v1/namespaces/:name", wrapper.GetV1NamespacesName)
	router.GET(options.BaseURL+"/v1/namespaces/:name/offloaded", wrapper.GetV1NamespacesNameOffloaded)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW32/jNgz+VwJtj77Y7g3YkLfu+mPFbk3QdHtYcQ+szDi6ypQmyWm9Iv/7INmx48RN",
	"UxQbbkCAyCItk9/3keIz46rQipCcZZNnZvkSCwjLT4oy4YSiuQNXhi2ksmCTO3atCFnEZkiZoJxF7Nw6",
	"uJfCLjFjETsTlisi5K62niGJYDgvtKu6J2OUYRGbl5yjtX7nyaEhkOxLxFylkU2YdcYfso7YhTIocvok",
	"S+vQ+HC0URqNExiCAy3maFZouni/N7hgE/Zd3CUZNxnGu+mtIwalWyI5waGf9l4oIhveJq4KQfkMMWy9",
	"PQKCAgePJnSPyjx8BofEq0MuB8JWpcvVu+LT9Zu34eROD9PSTRc/A3lWr6hZDJJo0KrScHyVnpvWcb1u",
	"z1H3X5E7f841FGg1cNzXATcY+LsVNZb4BIWW/vWT5CT9kPz4IUlvk2QSfn+ygSBfZEEtFlJBdgR2085z",
	"HTG7V0Gn3ImVr6FbNIUgCJWyD9hg6iobyho0cOGqN+B6INHSYvZOhqY9rPrB0oa930BrQfncGXCYV9sI",
	"ndNCGY5zKNCTHdrIAkrpwtOQtjp2ZkuwPYHeIGQV89g17WOOErnDWrAzo3JTd6C5KvAChAyWUynb9WGe",
	"IqZV1mU8lM9nxUGyiN1goZxPJ2ycUtZsHEf+TGX/huJFAXl9VvvuHUNaqUob9VTFYfkBpBaEk1U6Tn8a",
	"f2QRo1zQ0yQdpz+MT3wCwmEx3HqaDTAGKv8s4R5l3bazusmAnPWS2juijcy3es0m9dfZEEovt9HttrFv",
	"VVmttSGjQevAuJmSgveIPZWPUHntTMmrpTSe3GtcoRkUyn4v6K7Rm5KoXoU7EbMgvVaDv9MDqUc6Uio3",
	"2612RzC67HGdDsSJeokFGpBzpwzkO8JKk0sxJKQCC2Wq43y1yvqSS9PkiMzW4aZdqMCScOETF7IU2XQ+",
	"OkOYj5zSSqq8GmVgl/cKjMduhcYKRT6ccTJOQr/QSKAFm7CPYStiGtwyhBQvEaRb/u3XOTr/5/ELVXaV",
	"sQm7RPdL4xKkoRXZGtuTJPF/GVpuhHb1N6e/hkxsWRTg4WH1yyO+RP4QTPEqjXndm+yhr/6Rftp4DX+Y",
	"K3JIrikT2Qwz8VfrA9kMeH7VFuuhJr8zdO1Vsg+9n+rpSArrRmoxatPpp36JbthlG4L4WWTr43C4ygJz",
	"Bgqswbt7ZsJH4tlkm2bgZzYP2F+lMP5uc6bEaAuNXdl9eSe6bwF1CETeGnexayyj+2p0dTYMXOw7mT0W",
	"vuvg/D/DMExBg8hRbdmFLUDiNQfbCG6WW0i2d8QrAF53fv9FJXYT75uKcCubl8twx6mPQvzs1+tjwWiG",
	"tdfFRLXjNyKnDt1BTW2Z94S1sXk9haRexDBuRtR6uD4WzWn70jcJ61Hq9XPrm3TbIjUKY8I+7H2HDfY1",
	"EQ0L6/U/AQAA//8VaL5/3xAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
